/*
PostPuma - OpenAPI 3.0

PostPuma API specifications

API version: 1.0.0
Contact: support@postpuma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package PostPuma

import (
	"encoding/json"
)

// checks if the VersionContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionContent{}

// VersionContent struct for VersionContent
type VersionContent struct {
	Body *string `json:"body,omitempty"`
	Media []string `json:"media,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewVersionContent instantiates a new VersionContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionContent() *VersionContent {
	this := VersionContent{}
	return &this
}

// NewVersionContentWithDefaults instantiates a new VersionContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionContentWithDefaults() *VersionContent {
	this := VersionContent{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *VersionContent) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionContent) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *VersionContent) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *VersionContent) SetBody(v string) {
	o.Body = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *VersionContent) GetMedia() []string {
	if o == nil || IsNil(o.Media) {
		var ret []string
		return ret
	}
	return o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionContent) GetMediaOk() ([]string, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *VersionContent) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given []string and assigns it to the Media field.
func (o *VersionContent) SetMedia(v []string) {
	o.Media = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *VersionContent) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionContent) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *VersionContent) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *VersionContent) SetUrl(v string) {
	o.Url = &v
}

func (o VersionContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableVersionContent struct {
	value *VersionContent
	isSet bool
}

func (v NullableVersionContent) Get() *VersionContent {
	return v.value
}

func (v *NullableVersionContent) Set(val *VersionContent) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionContent) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionContent(val *VersionContent) *NullableVersionContent {
	return &NullableVersionContent{value: val, isSet: true}
}

func (v NullableVersionContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


