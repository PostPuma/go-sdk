/*
PostPuma - OpenAPI 3.0

PostPuma API specifications

API version: 1.0.0
Contact: support@postpuma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package PostPuma

import (
	"encoding/json"
)

// checks if the DeletePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletePostRequest{}

// DeletePostRequest struct for DeletePostRequest
type DeletePostRequest struct {
	// Whether to move items to trash or not.
	Trash *bool `json:"trash,omitempty"`
}

// NewDeletePostRequest instantiates a new DeletePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletePostRequest() *DeletePostRequest {
	this := DeletePostRequest{}
	return &this
}

// NewDeletePostRequestWithDefaults instantiates a new DeletePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletePostRequestWithDefaults() *DeletePostRequest {
	this := DeletePostRequest{}
	return &this
}

// GetTrash returns the Trash field value if set, zero value otherwise.
func (o *DeletePostRequest) GetTrash() bool {
	if o == nil || IsNil(o.Trash) {
		var ret bool
		return ret
	}
	return *o.Trash
}

// GetTrashOk returns a tuple with the Trash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePostRequest) GetTrashOk() (*bool, bool) {
	if o == nil || IsNil(o.Trash) {
		return nil, false
	}
	return o.Trash, true
}

// HasTrash returns a boolean if a field has been set.
func (o *DeletePostRequest) HasTrash() bool {
	if o != nil && !IsNil(o.Trash) {
		return true
	}

	return false
}

// SetTrash gets a reference to the given bool and assigns it to the Trash field.
func (o *DeletePostRequest) SetTrash(v bool) {
	o.Trash = &v
}

func (o DeletePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Trash) {
		toSerialize["trash"] = o.Trash
	}
	return toSerialize, nil
}

type NullableDeletePostRequest struct {
	value *DeletePostRequest
	isSet bool
}

func (v NullableDeletePostRequest) Get() *DeletePostRequest {
	return v.value
}

func (v *NullableDeletePostRequest) Set(val *DeletePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePostRequest(val *DeletePostRequest) *NullableDeletePostRequest {
	return &NullableDeletePostRequest{value: val, isSet: true}
}

func (v NullableDeletePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


