/*
PostPuma - OpenAPI 3.0

PostPuma API specifications

API version: 1.0.0
Contact: support@postpuma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package PostPuma

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeletePostsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletePostsRequest{}

// DeletePostsRequest struct for DeletePostsRequest
type DeletePostsRequest struct {
	// Post UUIDs
	Posts []string `json:"posts"`
	Trash *bool `json:"trash,omitempty"`
}

type _DeletePostsRequest DeletePostsRequest

// NewDeletePostsRequest instantiates a new DeletePostsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletePostsRequest(posts []string) *DeletePostsRequest {
	this := DeletePostsRequest{}
	this.Posts = posts
	return &this
}

// NewDeletePostsRequestWithDefaults instantiates a new DeletePostsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletePostsRequestWithDefaults() *DeletePostsRequest {
	this := DeletePostsRequest{}
	return &this
}

// GetPosts returns the Posts field value
func (o *DeletePostsRequest) GetPosts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Posts
}

// GetPostsOk returns a tuple with the Posts field value
// and a boolean to check if the value has been set.
func (o *DeletePostsRequest) GetPostsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Posts, true
}

// SetPosts sets field value
func (o *DeletePostsRequest) SetPosts(v []string) {
	o.Posts = v
}

// GetTrash returns the Trash field value if set, zero value otherwise.
func (o *DeletePostsRequest) GetTrash() bool {
	if o == nil || IsNil(o.Trash) {
		var ret bool
		return ret
	}
	return *o.Trash
}

// GetTrashOk returns a tuple with the Trash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePostsRequest) GetTrashOk() (*bool, bool) {
	if o == nil || IsNil(o.Trash) {
		return nil, false
	}
	return o.Trash, true
}

// HasTrash returns a boolean if a field has been set.
func (o *DeletePostsRequest) HasTrash() bool {
	if o != nil && !IsNil(o.Trash) {
		return true
	}

	return false
}

// SetTrash gets a reference to the given bool and assigns it to the Trash field.
func (o *DeletePostsRequest) SetTrash(v bool) {
	o.Trash = &v
}

func (o DeletePostsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletePostsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["posts"] = o.Posts
	if !IsNil(o.Trash) {
		toSerialize["trash"] = o.Trash
	}
	return toSerialize, nil
}

func (o *DeletePostsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"posts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeletePostsRequest := _DeletePostsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeletePostsRequest)

	if err != nil {
		return err
	}

	*o = DeletePostsRequest(varDeletePostsRequest)

	return err
}

type NullableDeletePostsRequest struct {
	value *DeletePostsRequest
	isSet bool
}

func (v NullableDeletePostsRequest) Get() *DeletePostsRequest {
	return v.value
}

func (v *NullableDeletePostsRequest) Set(val *DeletePostsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePostsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePostsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePostsRequest(val *DeletePostsRequest) *NullableDeletePostsRequest {
	return &NullableDeletePostsRequest{value: val, isSet: true}
}

func (v NullableDeletePostsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePostsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


