/*
PostPuma - OpenAPI 3.0

PostPuma API specifications

API version: 1.0.0
Contact: support@postpuma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package PostPuma

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateTagRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTagRequest{}

// UpdateTagRequest struct for UpdateTagRequest
type UpdateTagRequest struct {
	Name string `json:"name"`
	HexColor *string `json:"hex_color,omitempty"`
}

type _UpdateTagRequest UpdateTagRequest

// NewUpdateTagRequest instantiates a new UpdateTagRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTagRequest(name string) *UpdateTagRequest {
	this := UpdateTagRequest{}
	this.Name = name
	return &this
}

// NewUpdateTagRequestWithDefaults instantiates a new UpdateTagRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTagRequestWithDefaults() *UpdateTagRequest {
	this := UpdateTagRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateTagRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateTagRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateTagRequest) SetName(v string) {
	o.Name = v
}

// GetHexColor returns the HexColor field value if set, zero value otherwise.
func (o *UpdateTagRequest) GetHexColor() string {
	if o == nil || IsNil(o.HexColor) {
		var ret string
		return ret
	}
	return *o.HexColor
}

// GetHexColorOk returns a tuple with the HexColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTagRequest) GetHexColorOk() (*string, bool) {
	if o == nil || IsNil(o.HexColor) {
		return nil, false
	}
	return o.HexColor, true
}

// HasHexColor returns a boolean if a field has been set.
func (o *UpdateTagRequest) HasHexColor() bool {
	if o != nil && !IsNil(o.HexColor) {
		return true
	}

	return false
}

// SetHexColor gets a reference to the given string and assigns it to the HexColor field.
func (o *UpdateTagRequest) SetHexColor(v string) {
	o.HexColor = &v
}

func (o UpdateTagRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTagRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.HexColor) {
		toSerialize["hex_color"] = o.HexColor
	}
	return toSerialize, nil
}

func (o *UpdateTagRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateTagRequest := _UpdateTagRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateTagRequest)

	if err != nil {
		return err
	}

	*o = UpdateTagRequest(varUpdateTagRequest)

	return err
}

type NullableUpdateTagRequest struct {
	value *UpdateTagRequest
	isSet bool
}

func (v NullableUpdateTagRequest) Get() *UpdateTagRequest {
	return v.value
}

func (v *NullableUpdateTagRequest) Set(val *UpdateTagRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTagRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTagRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTagRequest(val *UpdateTagRequest) *NullableUpdateTagRequest {
	return &NullableUpdateTagRequest{value: val, isSet: true}
}

func (v NullableUpdateTagRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTagRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


