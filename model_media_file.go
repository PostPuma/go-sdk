/*
PostPuma - OpenAPI 3.0

PostPuma API specifications

API version: 1.0.0
Contact: support@postpuma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package PostPuma

import (
	"encoding/json"
)

// checks if the MediaFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaFile{}

// MediaFile struct for MediaFile
type MediaFile struct {
	Id *string `json:"id,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	Name *string `json:"name,omitempty"`
	MimeType *string `json:"mime_type,omitempty"`
	Type *string `json:"type,omitempty"`
	Url *string `json:"url,omitempty"`
	ThumbUrl *string `json:"thumb_url,omitempty"`
	IsVideo *bool `json:"is_video,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
}

// NewMediaFile instantiates a new MediaFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaFile() *MediaFile {
	this := MediaFile{}
	return &this
}

// NewMediaFileWithDefaults instantiates a new MediaFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaFileWithDefaults() *MediaFile {
	this := MediaFile{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MediaFile) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MediaFile) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MediaFile) SetId(v string) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MediaFile) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MediaFile) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MediaFile) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MediaFile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MediaFile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MediaFile) SetName(v string) {
	o.Name = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *MediaFile) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *MediaFile) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *MediaFile) SetMimeType(v string) {
	o.MimeType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MediaFile) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MediaFile) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MediaFile) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *MediaFile) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *MediaFile) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *MediaFile) SetUrl(v string) {
	o.Url = &v
}

// GetThumbUrl returns the ThumbUrl field value if set, zero value otherwise.
func (o *MediaFile) GetThumbUrl() string {
	if o == nil || IsNil(o.ThumbUrl) {
		var ret string
		return ret
	}
	return *o.ThumbUrl
}

// GetThumbUrlOk returns a tuple with the ThumbUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetThumbUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ThumbUrl) {
		return nil, false
	}
	return o.ThumbUrl, true
}

// HasThumbUrl returns a boolean if a field has been set.
func (o *MediaFile) HasThumbUrl() bool {
	if o != nil && !IsNil(o.ThumbUrl) {
		return true
	}

	return false
}

// SetThumbUrl gets a reference to the given string and assigns it to the ThumbUrl field.
func (o *MediaFile) SetThumbUrl(v string) {
	o.ThumbUrl = &v
}

// GetIsVideo returns the IsVideo field value if set, zero value otherwise.
func (o *MediaFile) GetIsVideo() bool {
	if o == nil || IsNil(o.IsVideo) {
		var ret bool
		return ret
	}
	return *o.IsVideo
}

// GetIsVideoOk returns a tuple with the IsVideo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetIsVideoOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVideo) {
		return nil, false
	}
	return o.IsVideo, true
}

// HasIsVideo returns a boolean if a field has been set.
func (o *MediaFile) HasIsVideo() bool {
	if o != nil && !IsNil(o.IsVideo) {
		return true
	}

	return false
}

// SetIsVideo gets a reference to the given bool and assigns it to the IsVideo field.
func (o *MediaFile) SetIsVideo(v bool) {
	o.IsVideo = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MediaFile) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaFile) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MediaFile) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *MediaFile) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

func (o MediaFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MimeType) {
		toSerialize["mime_type"] = o.MimeType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.ThumbUrl) {
		toSerialize["thumb_url"] = o.ThumbUrl
	}
	if !IsNil(o.IsVideo) {
		toSerialize["is_video"] = o.IsVideo
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableMediaFile struct {
	value *MediaFile
	isSet bool
}

func (v NullableMediaFile) Get() *MediaFile {
	return v.value
}

func (v *NullableMediaFile) Set(val *MediaFile) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaFile) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaFile(val *MediaFile) *NullableMediaFile {
	return &NullableMediaFile{value: val, isSet: true}
}

func (v NullableMediaFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


