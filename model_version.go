/*
PostPuma - OpenAPI 3.0

PostPuma API specifications

API version: 1.0.0
Contact: support@postpuma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package PostPuma

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Version type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Version{}

// Version struct for Version
type Version struct {
	AccountId int32 `json:"account_id"`
	IsOriginal bool `json:"is_original"`
	Content VersionContent `json:"content"`
	Options *VersionOptions `json:"options,omitempty"`
}

type _Version Version

// NewVersion instantiates a new Version object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersion(accountId int32, isOriginal bool, content VersionContent) *Version {
	this := Version{}
	this.AccountId = accountId
	this.IsOriginal = isOriginal
	this.Content = content
	return &this
}

// NewVersionWithDefaults instantiates a new Version object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionWithDefaults() *Version {
	this := Version{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *Version) GetAccountId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Version) GetAccountIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Version) SetAccountId(v int32) {
	o.AccountId = v
}

// GetIsOriginal returns the IsOriginal field value
func (o *Version) GetIsOriginal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOriginal
}

// GetIsOriginalOk returns a tuple with the IsOriginal field value
// and a boolean to check if the value has been set.
func (o *Version) GetIsOriginalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOriginal, true
}

// SetIsOriginal sets field value
func (o *Version) SetIsOriginal(v bool) {
	o.IsOriginal = v
}

// GetContent returns the Content field value
func (o *Version) GetContent() VersionContent {
	if o == nil {
		var ret VersionContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Version) GetContentOk() (*VersionContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Version) SetContent(v VersionContent) {
	o.Content = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Version) GetOptions() VersionOptions {
	if o == nil || IsNil(o.Options) {
		var ret VersionOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Version) GetOptionsOk() (*VersionOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Version) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given VersionOptions and assigns it to the Options field.
func (o *Version) SetOptions(v VersionOptions) {
	o.Options = &v
}

func (o Version) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Version) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["is_original"] = o.IsOriginal
	toSerialize["content"] = o.Content
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

func (o *Version) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"is_original",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersion := _Version{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVersion)

	if err != nil {
		return err
	}

	*o = Version(varVersion)

	return err
}

type NullableVersion struct {
	value *Version
	isSet bool
}

func (v NullableVersion) Get() *Version {
	return v.value
}

func (v *NullableVersion) Set(val *Version) {
	v.value = val
	v.isSet = true
}

func (v NullableVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersion(val *Version) *NullableVersion {
	return &NullableVersion{value: val, isSet: true}
}

func (v NullableVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


