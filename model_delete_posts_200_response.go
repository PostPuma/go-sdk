/*
PostPuma - OpenAPI 3.0

PostPuma API specifications

API version: 1.0.0
Contact: support@postpuma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package PostPuma

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// DeletePosts200Response - struct for DeletePosts200Response
type DeletePosts200Response struct {
	DeletePosts200ResponseOneOf *DeletePosts200ResponseOneOf
	DeletePosts200ResponseOneOf1 *DeletePosts200ResponseOneOf1
}

// DeletePosts200ResponseOneOfAsDeletePosts200Response is a convenience function that returns DeletePosts200ResponseOneOf wrapped in DeletePosts200Response
func DeletePosts200ResponseOneOfAsDeletePosts200Response(v *DeletePosts200ResponseOneOf) DeletePosts200Response {
	return DeletePosts200Response{
		DeletePosts200ResponseOneOf: v,
	}
}

// DeletePosts200ResponseOneOf1AsDeletePosts200Response is a convenience function that returns DeletePosts200ResponseOneOf1 wrapped in DeletePosts200Response
func DeletePosts200ResponseOneOf1AsDeletePosts200Response(v *DeletePosts200ResponseOneOf1) DeletePosts200Response {
	return DeletePosts200Response{
		DeletePosts200ResponseOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeletePosts200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DeletePosts200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.DeletePosts200ResponseOneOf)
	if err == nil {
		jsonDeletePosts200ResponseOneOf, _ := json.Marshal(dst.DeletePosts200ResponseOneOf)
		if string(jsonDeletePosts200ResponseOneOf) == "{}" { // empty struct
			dst.DeletePosts200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.DeletePosts200ResponseOneOf); err != nil {
				dst.DeletePosts200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeletePosts200ResponseOneOf = nil
	}

	// try to unmarshal data into DeletePosts200ResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.DeletePosts200ResponseOneOf1)
	if err == nil {
		jsonDeletePosts200ResponseOneOf1, _ := json.Marshal(dst.DeletePosts200ResponseOneOf1)
		if string(jsonDeletePosts200ResponseOneOf1) == "{}" { // empty struct
			dst.DeletePosts200ResponseOneOf1 = nil
		} else {
			if err = validator.Validate(dst.DeletePosts200ResponseOneOf1); err != nil {
				dst.DeletePosts200ResponseOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeletePosts200ResponseOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DeletePosts200ResponseOneOf = nil
		dst.DeletePosts200ResponseOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeletePosts200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeletePosts200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeletePosts200Response) MarshalJSON() ([]byte, error) {
	if src.DeletePosts200ResponseOneOf != nil {
		return json.Marshal(&src.DeletePosts200ResponseOneOf)
	}

	if src.DeletePosts200ResponseOneOf1 != nil {
		return json.Marshal(&src.DeletePosts200ResponseOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeletePosts200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DeletePosts200ResponseOneOf != nil {
		return obj.DeletePosts200ResponseOneOf
	}

	if obj.DeletePosts200ResponseOneOf1 != nil {
		return obj.DeletePosts200ResponseOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableDeletePosts200Response struct {
	value *DeletePosts200Response
	isSet bool
}

func (v NullableDeletePosts200Response) Get() *DeletePosts200Response {
	return v.value
}

func (v *NullableDeletePosts200Response) Set(val *DeletePosts200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePosts200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePosts200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePosts200Response(val *DeletePosts200Response) *NullableDeletePosts200Response {
	return &NullableDeletePosts200Response{value: val, isSet: true}
}

func (v NullableDeletePosts200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePosts200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


