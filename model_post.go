/*
PostPuma - OpenAPI 3.0

PostPuma API specifications

API version: 1.0.0
Contact: support@postpuma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package PostPuma

import (
	"encoding/json"
)

// checks if the Post type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Post{}

// Post struct for Post
type Post struct {
	Id *int32 `json:"id,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	Status *string `json:"status,omitempty"`
	Accounts []Account `json:"accounts,omitempty"`
	Versions []Version `json:"versions,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	User *PostUser `json:"user,omitempty"`
	ScheduledAt *string `json:"scheduled_at,omitempty"`
	PublishedAt *string `json:"published_at,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Trashed *bool `json:"trashed,omitempty"`
}

// NewPost instantiates a new Post object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPost() *Post {
	this := Post{}
	return &this
}

// NewPostWithDefaults instantiates a new Post object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostWithDefaults() *Post {
	this := Post{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Post) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Post) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Post) SetId(v int32) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Post) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Post) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Post) SetUuid(v string) {
	o.Uuid = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Post) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Post) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Post) SetStatus(v string) {
	o.Status = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *Post) GetAccounts() []Account {
	if o == nil || IsNil(o.Accounts) {
		var ret []Account
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetAccountsOk() ([]Account, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *Post) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []Account and assigns it to the Accounts field.
func (o *Post) SetAccounts(v []Account) {
	o.Accounts = v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *Post) GetVersions() []Version {
	if o == nil || IsNil(o.Versions) {
		var ret []Version
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetVersionsOk() ([]Version, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *Post) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []Version and assigns it to the Versions field.
func (o *Post) SetVersions(v []Version) {
	o.Versions = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Post) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Post) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *Post) SetTags(v []Tag) {
	o.Tags = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Post) GetUser() PostUser {
	if o == nil || IsNil(o.User) {
		var ret PostUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetUserOk() (*PostUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Post) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given PostUser and assigns it to the User field.
func (o *Post) SetUser(v PostUser) {
	o.User = &v
}

// GetScheduledAt returns the ScheduledAt field value if set, zero value otherwise.
func (o *Post) GetScheduledAt() string {
	if o == nil || IsNil(o.ScheduledAt) {
		var ret string
		return ret
	}
	return *o.ScheduledAt
}

// GetScheduledAtOk returns a tuple with the ScheduledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetScheduledAtOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledAt) {
		return nil, false
	}
	return o.ScheduledAt, true
}

// HasScheduledAt returns a boolean if a field has been set.
func (o *Post) HasScheduledAt() bool {
	if o != nil && !IsNil(o.ScheduledAt) {
		return true
	}

	return false
}

// SetScheduledAt gets a reference to the given string and assigns it to the ScheduledAt field.
func (o *Post) SetScheduledAt(v string) {
	o.ScheduledAt = &v
}

// GetPublishedAt returns the PublishedAt field value if set, zero value otherwise.
func (o *Post) GetPublishedAt() string {
	if o == nil || IsNil(o.PublishedAt) {
		var ret string
		return ret
	}
	return *o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetPublishedAtOk() (*string, bool) {
	if o == nil || IsNil(o.PublishedAt) {
		return nil, false
	}
	return o.PublishedAt, true
}

// HasPublishedAt returns a boolean if a field has been set.
func (o *Post) HasPublishedAt() bool {
	if o != nil && !IsNil(o.PublishedAt) {
		return true
	}

	return false
}

// SetPublishedAt gets a reference to the given string and assigns it to the PublishedAt field.
func (o *Post) SetPublishedAt(v string) {
	o.PublishedAt = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Post) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Post) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Post) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetTrashed returns the Trashed field value if set, zero value otherwise.
func (o *Post) GetTrashed() bool {
	if o == nil || IsNil(o.Trashed) {
		var ret bool
		return ret
	}
	return *o.Trashed
}

// GetTrashedOk returns a tuple with the Trashed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Post) GetTrashedOk() (*bool, bool) {
	if o == nil || IsNil(o.Trashed) {
		return nil, false
	}
	return o.Trashed, true
}

// HasTrashed returns a boolean if a field has been set.
func (o *Post) HasTrashed() bool {
	if o != nil && !IsNil(o.Trashed) {
		return true
	}

	return false
}

// SetTrashed gets a reference to the given bool and assigns it to the Trashed field.
func (o *Post) SetTrashed(v bool) {
	o.Trashed = &v
}

func (o Post) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Post) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.ScheduledAt) {
		toSerialize["scheduled_at"] = o.ScheduledAt
	}
	if !IsNil(o.PublishedAt) {
		toSerialize["published_at"] = o.PublishedAt
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Trashed) {
		toSerialize["trashed"] = o.Trashed
	}
	return toSerialize, nil
}

type NullablePost struct {
	value *Post
	isSet bool
}

func (v NullablePost) Get() *Post {
	return v.value
}

func (v *NullablePost) Set(val *Post) {
	v.value = val
	v.isSet = true
}

func (v NullablePost) IsSet() bool {
	return v.isSet
}

func (v *NullablePost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePost(val *Post) *NullablePost {
	return &NullablePost{value: val, isSet: true}
}

func (v NullablePost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


