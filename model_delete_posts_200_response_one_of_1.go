/*
PostPuma - OpenAPI 3.0

PostPuma API specifications

API version: 1.0.0
Contact: support@postpuma.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package PostPuma

import (
	"encoding/json"
)

// checks if the DeletePosts200ResponseOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletePosts200ResponseOneOf1{}

// DeletePosts200ResponseOneOf1 struct for DeletePosts200ResponseOneOf1
type DeletePosts200ResponseOneOf1 struct {
	ToTrash *bool `json:"to_trash,omitempty"`
}

// NewDeletePosts200ResponseOneOf1 instantiates a new DeletePosts200ResponseOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletePosts200ResponseOneOf1() *DeletePosts200ResponseOneOf1 {
	this := DeletePosts200ResponseOneOf1{}
	return &this
}

// NewDeletePosts200ResponseOneOf1WithDefaults instantiates a new DeletePosts200ResponseOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletePosts200ResponseOneOf1WithDefaults() *DeletePosts200ResponseOneOf1 {
	this := DeletePosts200ResponseOneOf1{}
	return &this
}

// GetToTrash returns the ToTrash field value if set, zero value otherwise.
func (o *DeletePosts200ResponseOneOf1) GetToTrash() bool {
	if o == nil || IsNil(o.ToTrash) {
		var ret bool
		return ret
	}
	return *o.ToTrash
}

// GetToTrashOk returns a tuple with the ToTrash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePosts200ResponseOneOf1) GetToTrashOk() (*bool, bool) {
	if o == nil || IsNil(o.ToTrash) {
		return nil, false
	}
	return o.ToTrash, true
}

// HasToTrash returns a boolean if a field has been set.
func (o *DeletePosts200ResponseOneOf1) HasToTrash() bool {
	if o != nil && !IsNil(o.ToTrash) {
		return true
	}

	return false
}

// SetToTrash gets a reference to the given bool and assigns it to the ToTrash field.
func (o *DeletePosts200ResponseOneOf1) SetToTrash(v bool) {
	o.ToTrash = &v
}

func (o DeletePosts200ResponseOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletePosts200ResponseOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ToTrash) {
		toSerialize["to_trash"] = o.ToTrash
	}
	return toSerialize, nil
}

type NullableDeletePosts200ResponseOneOf1 struct {
	value *DeletePosts200ResponseOneOf1
	isSet bool
}

func (v NullableDeletePosts200ResponseOneOf1) Get() *DeletePosts200ResponseOneOf1 {
	return v.value
}

func (v *NullableDeletePosts200ResponseOneOf1) Set(val *DeletePosts200ResponseOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePosts200ResponseOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePosts200ResponseOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePosts200ResponseOneOf1(val *DeletePosts200ResponseOneOf1) *NullableDeletePosts200ResponseOneOf1 {
	return &NullableDeletePosts200ResponseOneOf1{value: val, isSet: true}
}

func (v NullableDeletePosts200ResponseOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePosts200ResponseOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


